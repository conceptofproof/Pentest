#!/usr/bin/python

###########################################################################
#Saltine Cracker                                                          #                                                                         
#Very rudimentary hash cracker                                            # 
#                                                                         #       
#Copyright (C) 2013 Joshua Wang | joshua[dot]wang[dot]90[at]gmail[dot]com #
#Twitter - http://twitter.com/conceptofproof                              #
#Blog - http://conceptofproof.wordpress.com                               #
###########################################################################

import binascii, hashlib
import sys
import argparse
from argparse import RawTextHelpFormatter

def crack(hash, dict, alg):
  f = open(dict,'r')
  for line in f:
    line = line.rstrip()
    if alg==1:
      h = hashlib.new('md5')
      h.update(line)
      hash_line = h.hexdigest()
    elif alg==2:
      h = hashlib.new('sha1')
      h.update(line)
      hash_line = h.hexdigest()
    elif alg==3:
      h = hashlib.new('sha256')
      h.update(line)
      hash_line = h.hexdigest()
    elif alg==4:
      h = hashlib.new('sha512')
      h.update(line)
      hash_line = h.hexdigest()
    elif alg==5:
      try:
        hash_line = binascii.hexlify(hashlib.new('md4', line.encode('utf-16le')).digest())
      except Exception:
        continue
    if hash_line == hash:
      print '[*] Hash decrypted! Plaintext is "' + line+'"'
      sys.exit(0)   
  print "hash not found."
parser = argparse.ArgumentParser(description= "Just a simple Saltine Cr4CK3r. ver: 1.0\n"
                                             +"Hash Algorithms Supported: 1-md5, 2-sha1, 3-sha256, 4-sha512, 5-NTLM\n",
                                 epilog = "example: saltine.py -H 1 -d dict.txt fc3ff98e8c6a0d3087d515c0473f8677\n"+
                                          "example: saltine.py -H 4 password.txt ",
                                 formatter_class=RawTextHelpFormatter)
parser.add_argument('hash')
parser.add_argument('-H', metavar = "HASH ALGORITHM", dest="hash_alg", type=int, help = "hash algorithm")
parser.add_argument('-d', metavar = "DICT", dest="dict",  help = "dictionary file")
p = parser.parse_args()
if p.dict == False:
  print '[x] could not read file!'
elif p.hash_alg>5 or p.hash_alg<1:
  print '[x] invalid algorithm!'
elif p.hash and p.hash_alg and p.dict:
  print "[*] Cracking..."  
  crack(p.hash,p.dict,p.hash_alg)
else:
  parser.print_help()
